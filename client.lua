--------------------------------------------------
-- guirun.client.gui.lua
-- 
-- Merged guidump with gui.lua...
--
-- My initial thought is to prevent messy code, 
-- however more errors have occured...
--------------------------------------------------


--   /$$$$$$  /$$$$$$$$ /$$$$$$$$ /$$$$$$$$ /$$$$$$ /$$   /$$  /$$$$$$   /$$$$$$ 
--  /$$__  $$| $$_____/|__  $$__/|__  $$__/|_  $$_/| $$$ | $$ /$$__  $$ /$$__  $$
-- | $$  \__/| $$         | $$      | $$     | $$  | $$$$| $$| $$  \__/| $$  \__/
-- |  $$$$$$ | $$$$$      | $$      | $$     | $$  | $$ $$ $$| $$ /$$$$|  $$$$$$ 
--  \____  $$| $$__/      | $$      | $$     | $$  | $$  $$$$| $$|_  $$ \____  $$
--  /$$  \ $$| $$         | $$      | $$     | $$  | $$\  $$$| $$  \ $$ /$$  \ $$
-- |  $$$$$$/| $$$$$$$$   | $$      | $$    /$$$$$$| $$ \  $$|  $$$$$$/|  $$$$$$/
--  \______/ |________/   |__/      |__/   |______/|__/  \__/ \______/  \______/ 
--
--------------------------------------------------
-- Please handle with care this could cause
-- errors and therefore prevent the script from
-- running.
--------------------------------------------------                                                                          
                                                                              
                                                                              
local settings = {

	hoverColor 	= {93, 174, 48},	-- R G B
	leaveColor 	= {255, 255,255},	-- R G B 

	warnings 	= {
		"Invalid name", 
		"No code to save"
	},

	runMode = {"SRUN", "CRUN"}, -- Conversion for radiobuttons DO NOT CHANGE

	fileName 	= "config.xml",	-- File name of .xml file
	rootNode 	= "root",		-- rootNode name
	childNode 	= "code",		-- childNode name
}

-- Usually where the code that is loaded will end up.
local code = nil


--   /$$$$$$  /$$   /$$ /$$$$$$       /$$$$$$$  /$$   /$$ /$$      /$$ /$$$$$$$ 
--  /$$__  $$| $$  | $$|_  $$_/      | $$__  $$| $$  | $$| $$$    /$$$| $$__  $$
-- | $$  \__/| $$  | $$  | $$        | $$  \ $$| $$  | $$| $$$$  /$$$$| $$  \ $$
-- | $$ /$$$$| $$  | $$  | $$        | $$  | $$| $$  | $$| $$ $$/$$ $$| $$$$$$$/
-- | $$|_  $$| $$  | $$  | $$        | $$  | $$| $$  | $$| $$  $$$| $$| $$____/ 
-- | $$  \ $$| $$  | $$  | $$        | $$  | $$| $$  | $$| $$\  $ | $$| $$      
-- |  $$$$$$/|  $$$$$$/ /$$$$$$      | $$$$$$$/|  $$$$$$/| $$ \/  | $$| $$      
--  \______/  \______/ |______/      |_______/  \______/ |__/     |__/|__/      
--
--------------------------------------------------
-- This is where the GUI has been dumped within
-- the file. This has been generated by GUIEDITOR
-- and is quite frankly messy. Edit with caution!
-- 
-- These GUI elements use relative positioning rather
-- than absolute.
--------------------------------------------------                                                                             
                                                                             
                                                                             
guirun = {
    radiobutton = {},
    button = {},
    label = {},
    memo = {}
}

guirun.window 	  		  = guiCreateWindow(0.26, 0.27, 0.47, 0.46, "RUNCODE", true)
	guirun.label[1] 	  = guiCreateLabel(0.04, 0.06, 0.12, 0.04, "SAVE", true, guirun.window)
	guirun.label[2] 	  = guiCreateLabel(0.16, 0.06, 0.12, 0.04, "LOAD", true, guirun.window)
	guirun.label[3] 	  = guiCreateLabel(0.06, 0.90, 0.12, 0.04, "SRUN", true, guirun.window)
	guirun.label[4] 	  = guiCreateLabel(0.20, 0.90, 0.12, 0.04, "CRUN", true, guirun.window)
	guirun.memo[1]  	  = guiCreateMemo(0.04, 0.13, 0.92, 0.75, "", true, guirun.window)
	guirun.radiobutton[1] = guiCreateRadioButton(0.04, 0.90, 0.02, 0.04, "", true, guirun.window)
	guirun.radiobutton[2] = guiCreateRadioButton(0.18, 0.90, 0.02, 0.04, "", true, guirun.window)
	guirun.button[1] 	  = guiCreateButton(0.68, 0.91, 0.13, 0.06, "RUN CODE", true, guirun.window)
	guirun.button[2]      = guiCreateButton(0.83, 0.91, 0.13, 0.06, "CLOSE", true, guirun.window)

-- WINDOW SETTINGS
	guiWindowSetMovable(guirun.window, false)
	guiWindowSetSizable(guirun.window, false)
	guiSetAlpha(guirun.window, 0.95)
	guiSetVisible(guirun.window, false)
-- RADIOBUTTON

	guirun.radiobutton[1]:setSelected(true)
-- LABEL SETTINGS
	guiSetFont(guirun.label[1], "default-bold-small")
	--guiLabelSetHorizontalAlign(guirun.label[1], "center", false)
	guiLabelSetVerticalAlign(guirun.label[1], "center")
	
	guiSetFont(guirun.label[2], "default-bold-small")
	guiLabelSetColor(guirun.label[2], 93, 174, 48)
	--guiLabelSetHorizontalAlign(guirun.label[2], "center", false)
	guiLabelSetVerticalAlign(guirun.label[2], "center")

	guiSetFont(guirun.label[3], "default-bold-small")
	guiLabelSetHorizontalAlign(guirun.label[3], "center", false)
	guiLabelSetVerticalAlign(guirun.label[3], "center")

	guiSetFont(guirun.label[4], "default-bold-small")
	guiLabelSetHorizontalAlign(guirun.label[4], "center", false)
	guiLabelSetVerticalAlign(guirun.label[4], "center")
	
-- BUTTON SETTINGS
	guiSetProperty(guirun.button[1], "NormalTextColour", "FFAAAAAA")
	guiSetProperty(guirun.button[2], "NormalTextColour", "FFAAAAAA")

--------------------------------------------------
-- This will handle the gridlist which is where
-- your saved data is loaded onto this can then
-- be further edited overwritten and possibly
-- deleted in the near future.
--------------------------------------------------

guirun.second = {
    edit = {},
    button = {},
    label = {},
    gridlist = {}
}

-- MAIN LOAD/SAVE WINDOW
guirun.second.window 			= guiCreateWindow(0.40, 0.27, 0.20, 0.51, "", true)
	guirun.second.gridlist[1] 	= guiCreateGridList(0.04, 0.08, 0.93, 0.81, true, guirun.second.window)
	guirun.second.button[1] 	= guiCreateButton(0.04, 0.89, 0.46, 0.05, "", true, guirun.second.window)
	guirun.second.button[2] 	= guiCreateButton(0.50, 0.89, 0.46, 0.05, "BACK", true, guirun.second.window)

-- WINDOW SETTINGS
	guiWindowSetMovable(guirun.second.window, false)
	guiWindowSetSizable(guirun.second.window, false)
	guiSetAlpha(guirun.second.window, 0.87)
	guiSetProperty(guirun.second.window, "AlwaysOnTop", "True")
	guiSetVisible(guirun.second.window, false)

-- GRIDLIST SETTINGS
	local column = guiGridListAddColumn(guirun.second.gridlist[1], "NAME", 0.9)
	
-- BUTTON SETTINGS
	guiSetProperty(guirun.second.button[1], "NormalTextColour", "FFAAAAAA")
	guiSetProperty(guirun.second.button[2], "NormalTextColour", "FFAAAAAA")

--------------------------------------------------
-- At the moment it's a rather obsolete panel however it's
-- used to record the actual name of the piece of code 
-- you've wrote.
--------------------------------------------------

guirun.third = {
    edit = {},
    label = {}
}
-- THIS WINDOW IS TO COMPLEMENT THE SAVE FEATURE
guirun.third.window 			= guiCreateWindow(0.60, 0.27, 0.13, 0.17, "Details", true)
	guirun.third.label[1] 		= guiCreateLabel(0.05, 0.24, 0.40, 0.12, "Name", true, guirun.third.window)
	guirun.third.label[2] 		= guiCreateLabel(0.05, 0.65, 0.89, 0.27, "Name is required!", true, guirun.third.window)
	guirun.third.edit[1] 		= guiCreateEdit(0.05, 0.40, 0.89, 0.18, "", true, guirun.third.window)

-- WINDOW SETTINGS

	guiWindowSetMovable(guirun.third.window, false)
	guiWindowSetSizable(guirun.third.window, false)
	guiSetAlpha(guirun.third.window, 0.87)
	guiSetProperty(guirun.third.window, "AlwaysOnTop", "True")
	guiSetVisible(guirun.third.window, false)


-- LABEL SETTINGS
	guiSetFont(guirun.third.label[1], "default-bold-small")
	guiLabelSetHorizontalAlign(guirun.third.label[1], "center", false)
	guiLabelSetVerticalAlign(guirun.third.label[1], "center")

	guiSetFont(guirun.third.label[2], "default-bold-small")
	guiLabelSetHorizontalAlign(guirun.third.label[2], "center", false)
	guiLabelSetVerticalAlign(guirun.third.label[2], "center")
	guirun.third.label[2]:setVisible(false)	



--   /$$$$$$  /$$   /$$ /$$$$$$       /$$$$$$$$ /$$   /$$ /$$   /$$  /$$$$$$  /$$$$$$$$ /$$$$$$  /$$$$$$  /$$   /$$  /$$$$$$ 
--  /$$__  $$| $$  | $$|_  $$_/      | $$_____/| $$  | $$| $$$ | $$ /$$__  $$|__  $$__/|_  $$_/ /$$__  $$| $$$ | $$ /$$__  $$
-- | $$  \__/| $$  | $$  | $$        | $$      | $$  | $$| $$$$| $$| $$  \__/   | $$     | $$  | $$  \ $$| $$$$| $$| $$  \__/
-- | $$ /$$$$| $$  | $$  | $$        | $$$$$   | $$  | $$| $$ $$ $$| $$         | $$     | $$  | $$  | $$| $$ $$ $$|  $$$$$$ 
-- | $$|_  $$| $$  | $$  | $$        | $$__/   | $$  | $$| $$  $$$$| $$         | $$     | $$  | $$  | $$| $$  $$$$ \____  $$
-- | $$  \ $$| $$  | $$  | $$        | $$      | $$  | $$| $$\  $$$| $$    $$   | $$     | $$  | $$  | $$| $$\  $$$ /$$  \ $$
-- |  $$$$$$/|  $$$$$$/ /$$$$$$      | $$      |  $$$$$$/| $$ \  $$|  $$$$$$/   | $$    /$$$$$$|  $$$$$$/| $$ \  $$|  $$$$$$/
--  \______/  \______/ |______/      |__/       \______/ |__/  \__/ \______/    |__/   |______/ \______/ |__/  \__/ \______/ 
--
--------------------------------------------------
-- These functions dictate how the panel behaves
-- when certain actions (events) are triggered.
--------------------------------------------------                                                                                                                          
                                                                                                                          
                                                                                                                          


--------------------------------------------------
-- Sets the main window visible
-- @param boolean this is passed onto setVisible method.

-- @return true if successful, false otherwise
--------------------------------------------------
function guirun:setVisible(bool)
	assert(type(bool) == "boolean", "Incorrect type expected boolean -> guirun.setVisible(bool)")
	local window = self.window
	local cursor = isCursorShowing()
	bool = bool or true

	if window:getVisible() ~= bool then
		window:setVisible(bool)
		if cursor ~= bool then
			showCursor(bool)
		end
		outputDebugString("Set window "..tostring(bool))

		return true
	end

	outputDebugString("Cannot set window "..tostring(bool))
	return false
end

--------------------------------------------------
-- Opens both second.window and third.window
-- which is also known as 'save mode'
--------------------------------------------------
function guirun:setSaveMode(bool)
	assert(type(bool) == "boolean", "Incorrect type expected boolean -> guirun:setSaveMode(bool)")
	local window = self.second.window
	local funcButton = self.second.button[1]
	local other = self.third.window
		window:setVisible(bool)
		other:setVisible(bool)
			-- Set text to elements
		if bool then
			funcButton:setText("SAVE")
			window:setText("SAVE")
		end
	return true
end
--------------------------------------------------
-- Opens both second.window and sets text to some
-- gui elements which is also known as 'load'
--------------------------------------------------
function guirun:setLoadMode(bool)
	assert(type(bool) == "boolean", "Incorrect type expected boolean -> guirun:setLoadMode(bool)")
	local window = self.second.window
	local other = self.third.window
	local funcButton = self.second.button[1]

		window:setVisible(bool)

		-- Set text to elements
		if bool then 
			window:setText("LOAD")
			funcButton:setText("LOAD")
		end
		return true
end

--------------------------------------------------
-- Populates the gridlist with contents of XML file.
-- FIXED
--------------------------------------------------
function guirun:populateGridlist()
	if code ~= nil or #code > 0 then
		local gridlist = self.second.gridlist[1]
		for k, v in pairs(code) do
			local r = guiGridListAddRow(gridlist)
			guiGridListSetItemText(gridlist, r, column, k, false, false)
		end
		outputDebugString("Set values to gridlist")
		return true
	end

	outputDebugString("Cannot populate gridlist")
	return false
end

--------------------------------------------------
-- Get which radio button is selected
--------------------------------------------------
function guirun:getRunMode()
	for i = 1, 2 do
		if guirun.radiobutton[i]:getSelected() then
			return settings.runMode[i]
		end
	end

	outputDebugString("Neither are selected")
	return false
end
--------------------------------------------------
-- THESE FUNCTIONS WILL ONLY WORK WHEN ATTACHED
-- TO onClientMouseEnter/onClientMouseLeave
--------------------------------------------------
function onLabelEnter()
	if isElement(this) then
		local i = settings.hoverColor
		this:setColor(i[1], i[2], i[3])
	end
end

function onLabelLeave()
	if isElement(this) then
		local i = settings.leaveColor
		this:setColor(i[1], i[2], i[3])
	end
end


--  /$$   /$$ /$$      /$$ /$$             /$$   /$$  /$$$$$$  /$$   /$$ /$$$$$$$  /$$       /$$$$$$ /$$   /$$  /$$$$$$ 
-- | $$  / $$| $$$    /$$$| $$            | $$  | $$ /$$__  $$| $$$ | $$| $$__  $$| $$      |_  $$_/| $$$ | $$ /$$__  $$
-- |  $$/ $$/| $$$$  /$$$$| $$            | $$  | $$| $$  \ $$| $$$$| $$| $$  \ $$| $$        | $$  | $$$$| $$| $$  \__/
--  \  $$$$/ | $$ $$/$$ $$| $$            | $$$$$$$$| $$$$$$$$| $$ $$ $$| $$  | $$| $$        | $$  | $$ $$ $$| $$ /$$$$
--   >$$  $$ | $$  $$$| $$| $$            | $$__  $$| $$__  $$| $$  $$$$| $$  | $$| $$        | $$  | $$  $$$$| $$|_  $$
--  /$$/\  $$| $$\  $ | $$| $$            | $$  | $$| $$  | $$| $$\  $$$| $$  | $$| $$        | $$  | $$\  $$$| $$  \ $$
-- | $$  \ $$| $$ \/  | $$| $$$$$$$$      | $$  | $$| $$  | $$| $$ \  $$| $$$$$$$/| $$$$$$$$ /$$$$$$| $$ \  $$|  $$$$$$/
-- |__/  |__/|__/     |__/|________/      |__/  |__/|__/  |__/|__/  \__/|_______/ |________/|______/|__/  \__/ \______/ 
--
--------------------------------------------------
-- This part of the file handles the XML
-- which is used mainly to save and load code
-- within the guirun script.
--------------------------------------------------                                                                                                                     
                                                                                                                     

--------------------------------------------------
-- Check if file exists
--------------------------------------------------
function fileExist()
	local rootNode = xmlLoadFile(settings.fileName)

	if rootNode then
		xmlUnloadFile(rootNode)
		return true
	end

	return false
end

--------------------------------------------------
-- Saves code onto XML file.
-- Enables overwriting of file as well.

-- Pilot - Actually works OMFG!
--------------------------------------------------
function saveCode(key, code)
	assert(type(key, code) == "string", "Incorrect type expected string")
	local root, child = xmlLoadFile(settings.fileName), nil

	if root then
		child = xmlFindChild(root, settings.childNode, 0)

		if child then
			local success = xmlNodeSetAttribute(child, key, code)
			if success then
				outputDebugString("Saved code to file")
				xmlSaveFile(root)
				xmlUnloadFile(root)

				return true
			else
				outputDebugString("Could not save value onto attribute")
			end
		else
			outputDebugString("Could not find child")
		end

		-- Unload file 
		xmlUnloadFile(root)
	else
		outputDebugString("Could not find file")
	end
	return false
end

--------------------------------------------------
-- Very nested function of if-statements to find
-- errors and such. This loads code onto code table

-- Pilot - Fixed function not working properly
-- TODO: Make these errors actually mean something for the user.
-- TODO: Make function shorter and more readable rather than this fucking mess!
--------------------------------------------------
function loadCode()
	if not fileExist() then outputDebugString("File doesn't exist") return false end

	local root, child = xmlLoadFile(settings.fileName), nil

	if root then
		child = xmlFindChild(root, settings.childNode, 0)
		outputDebugString("test")
		if child then
			local attr = xmlNodeGetAttributes(child)
			if attr then
				code = attr
				return true
			else
				outputDebugString("Cannot get childNode attributes")
			end
		else
			outputDebugString("Cannot find child node")
		end
	else
		outputDebugString("Cannot load file")
	end

	xmlUnloadFile(root)
	return false
end

--------------------------------------------------
-- Checks multiple things 
--------------------------------------------------
function handleXML()
	if fileExist() then
		local success = loadCode()
		if success then
			return true
		end
	end

	return false
end

--  /$$$$$$$$ /$$    /$$ /$$$$$$$$ /$$   /$$ /$$$$$$$$       /$$   /$$  /$$$$$$  /$$   /$$ /$$$$$$$  /$$       /$$$$$$ /$$   /$$  /$$$$$$ 
-- | $$_____/| $$   | $$| $$_____/| $$$ | $$|__  $$__/      | $$  | $$ /$$__  $$| $$$ | $$| $$__  $$| $$      |_  $$_/| $$$ | $$ /$$__  $$
-- | $$      | $$   | $$| $$      | $$$$| $$   | $$         | $$  | $$| $$  \ $$| $$$$| $$| $$  \ $$| $$        | $$  | $$$$| $$| $$  \__/
-- | $$$$$   |  $$ / $$/| $$$$$   | $$ $$ $$   | $$         | $$$$$$$$| $$$$$$$$| $$ $$ $$| $$  | $$| $$        | $$  | $$ $$ $$| $$ /$$$$
-- | $$__/    \  $$ $$/ | $$__/   | $$  $$$$   | $$         | $$__  $$| $$__  $$| $$  $$$$| $$  | $$| $$        | $$  | $$  $$$$| $$|_  $$
-- | $$        \  $$$/  | $$      | $$\  $$$   | $$         | $$  | $$| $$  | $$| $$\  $$$| $$  | $$| $$        | $$  | $$\  $$$| $$  \ $$
-- | $$$$$$$$   \  $/   | $$$$$$$$| $$ \  $$   | $$         | $$  | $$| $$  | $$| $$ \  $$| $$$$$$$/| $$$$$$$$ /$$$$$$| $$ \  $$|  $$$$$$/
-- |________/    \_/    |________/|__/  \__/   |__/         |__/  |__/|__/  |__/|__/  \__/|_______/ |________/|______/|__/  \__/ \______/ 
--
--------------------------------------------------
-- If not the most important part of the file
-- this strings the GUI functions with the 
-- actual gui elements not to exclude the XML.
--------------------------------------------------                                                                                                                                       
                                                                                                                                       
                                                                                                                                       

addEventHandler("onClientMouseEnter", guirun.label[1], onLabelEnter, false)
addEventHandler("onClientMouseEnter", guirun.label[2], onLabelEnter, false)
addEventHandler("onClientMouseLeave", guirun.label[1], onLabelLeave, false)
addEventHandler("onClientMouseLeave", guirun.label[2], onLabelLeave, false)


--------------------------------------------------
-- When guirun.label[1] is clicked on enter
-- save mode.
--------------------------------------------------
addEventHandler("onClientGUIClick", guirun.label[1], 
	function ()
		guirun:setSaveMode(true)
		handleXML()
		guirun:populateGridlist()
	end
, false
)

--------------------------------------------------
-- When guirun.label[2] is clicked on enter
-- load mode.
--------------------------------------------------
addEventHandler("onClientGUIClick", guirun.label[2], 
	function ()
		guirun:setLoadMode(true)
		handleXML()
		guirun:populateGridlist()
	end
, false
)

addEventHandler("onClientGUIClick", guirun.second.button[2], 
	function ()
		-- Define local convertion table
		local i = {
			["SAVE"] = function (x) guirun:setSaveMode(x)  end,
			["LOAD"] = function (x) guirun:setLoadMode(x)  end
		}
		
		local mode = guirun.second.button[1]:getText()
		i[mode](false)
	end, false
)

-- TEMP COMMAND
addCommandHandler("guirun",
	function ()
		local n = not (guirun.window:getVisible())
		guirun:setVisible(not n)
	end
)

