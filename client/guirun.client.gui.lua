

--   /$$$$$$  /$$$$$$$$ /$$$$$$$$ /$$$$$$$$ /$$$$$$ /$$   /$$  /$$$$$$   /$$$$$$ 
--  /$$__  $$| $$_____/|__  $$__/|__  $$__/|_  $$_/| $$$ | $$ /$$__  $$ /$$__  $$
-- | $$  \__/| $$         | $$      | $$     | $$  | $$$$| $$| $$  \__/| $$  \__/
-- |  $$$$$$ | $$$$$      | $$      | $$     | $$  | $$ $$ $$| $$ /$$$$|  $$$$$$ 
--  \____  $$| $$__/      | $$      | $$     | $$  | $$  $$$$| $$|_  $$ \____  $$
--  /$$  \ $$| $$         | $$      | $$     | $$  | $$\  $$$| $$  \ $$ /$$  \ $$
-- |  $$$$$$/| $$$$$$$$   | $$      | $$    /$$$$$$| $$ \  $$|  $$$$$$/|  $$$$$$/
--  \______/ |________/   |__/      |__/   |______/|__/  \__/ \______/  \______/ 
--
--------------------------------------------------
-- Please handle with care this could cause
-- errors and therefore prevent the script from
-- running.
--------------------------------------------------                                                                          
                                                                              
                                                                              
settings = {

	hoverColor 	= {93, 174, 48},	-- R G B
	leaveColor 	= {255, 255,255},	-- R G B 

	warnings 	= {
		"Invalid name", 
		"No code to save"
	},

	secondWindow = {
		0.22,	-- 
		0.38, 	-- Expanded
	},

	runMode = {"SRUN", "CRUN"}, -- Conversion for radiobuttons DO NOT CHANGE

	fileName 	= "config.xml",	-- File name of .xml file
	rootNode 	= "root",		-- rootNode name
	childNode 	= "code",		-- childNode name
	_EXPANDED 	= false,
}

-- Usually where the code that is loaded will end up.
code = nil


--   /$$$$$$  /$$   /$$ /$$$$$$       /$$$$$$$  /$$   /$$ /$$      /$$ /$$$$$$$ 
--  /$$__  $$| $$  | $$|_  $$_/      | $$__  $$| $$  | $$| $$$    /$$$| $$__  $$
-- | $$  \__/| $$  | $$  | $$        | $$  \ $$| $$  | $$| $$$$  /$$$$| $$  \ $$
-- | $$ /$$$$| $$  | $$  | $$        | $$  | $$| $$  | $$| $$ $$/$$ $$| $$$$$$$/
-- | $$|_  $$| $$  | $$  | $$        | $$  | $$| $$  | $$| $$  $$$| $$| $$____/ 
-- | $$  \ $$| $$  | $$  | $$        | $$  | $$| $$  | $$| $$\  $ | $$| $$      
-- |  $$$$$$/|  $$$$$$/ /$$$$$$      | $$$$$$$/|  $$$$$$/| $$ \/  | $$| $$      
--  \______/  \______/ |______/      |_______/  \______/ |__/     |__/|__/      
--
--------------------------------------------------
-- This is where the GUI has been dumped within
-- the file. This has been generated by GUIEDITOR
-- and is quite frankly messy. Edit with caution!
-- 
-- These GUI elements use relative positioning rather
-- than absolute.
--------------------------------------------------                                                                             
                                                                             
                                                                             
guirun = {
    radiobutton = {},
    button = {},
    label = {},
    memo = {}
}

guirun.window 	  		  = guiCreateWindow(0.26, 0.27, 0.47, 0.46, "RUNCODE", true)
	guirun.label[1] 	  = guiCreateLabel(0.04, 0.06, 0.12, 0.04, "SAVE", true, guirun.window)
	guirun.label[2] 	  = guiCreateLabel(0.16, 0.06, 0.12, 0.04, "LOAD", true, guirun.window)
	guirun.label[3] 	  = guiCreateLabel(0.06, 0.90, 0.12, 0.04, "SRUN", true, guirun.window)
	guirun.label[4] 	  = guiCreateLabel(0.20, 0.90, 0.12, 0.04, "CRUN", true, guirun.window)
	guirun.memo[1]  	  = guiCreateMemo(0.04, 0.13, 0.92, 0.75, "", true, guirun.window)
	guirun.radiobutton[1] = guiCreateRadioButton(0.04, 0.90, 0.02, 0.04, "", true, guirun.window)
	guirun.radiobutton[2] = guiCreateRadioButton(0.18, 0.90, 0.02, 0.04, "", true, guirun.window)
	guirun.button[1] 	  = guiCreateButton(0.68, 0.91, 0.13, 0.06, "RUN CODE", true, guirun.window)
	guirun.button[2]      = guiCreateButton(0.83, 0.91, 0.13, 0.06, "CLOSE", true, guirun.window)

-- WINDOW SETTINGS
	guiWindowSetMovable(guirun.window, false)
	guiWindowSetSizable(guirun.window, false)
	guiSetAlpha(guirun.window, 0.95)
	guiSetVisible(guirun.window, false)
-- RADIOBUTTON

	guirun.radiobutton[1]:setSelected(true)
-- LABEL SETTINGS
	guiSetFont(guirun.label[1], "default-bold-small")
	--guiLabelSetHorizontalAlign(guirun.label[1], "center", false)
	guiLabelSetVerticalAlign(guirun.label[1], "center")
	
	guiSetFont(guirun.label[2], "default-bold-small")
	guiLabelSetColor(guirun.label[2], 93, 174, 48)
	--guiLabelSetHorizontalAlign(guirun.label[2], "center", false)
	guiLabelSetVerticalAlign(guirun.label[2], "center")

	guiSetFont(guirun.label[3], "default-bold-small")
	guiLabelSetHorizontalAlign(guirun.label[3], "center", false)
	guiLabelSetVerticalAlign(guirun.label[3], "center")

	guiSetFont(guirun.label[4], "default-bold-small")
	guiLabelSetHorizontalAlign(guirun.label[4], "center", false)
	guiLabelSetVerticalAlign(guirun.label[4], "center")
	
-- BUTTON SETTINGS
	guiSetProperty(guirun.button[1], "NormalTextColour", "FFAAAAAA")
	guiSetProperty(guirun.button[2], "NormalTextColour", "FFAAAAAA")

--------------------------------------------------
-- This will handle the gridlist which is where
-- your saved data is loaded onto this can then
-- be further edited overwritten and possibly
-- deleted in the near future.
--------------------------------------------------

-- (, 0.22, 0.51) Unaltered state

guirun.second = {
    checkbox = {},
    edit = {},
    button = {},
    label = {},
    gridlist = {}
}



guirun.second.window = guiCreateWindow(0.31, 0.24, 0.38, 0.51, "SAVE CODE", true)
	guirun.second.gridlist[1] = guiCreateGridList(10, 31, 254, 318, false, guirun.second.window)
	guirun.second.edit[1] = guiCreateEdit(322, 51, 171, 31, "", false, guirun.second.window)
	guirun.second.label[1] = guiCreateLabel(0.62, 0.05, 0.33, 0.04, "NAME", true, guirun.second.window)
	guirun.second.label[2] = guiCreateLabel(327, 98, 187, 59, "Save temporarily\n\nWhen you disconnect it's gone!", false, guirun.second.window)
	guirun.second.checkbox[1] = guiCreateCheckBox(306, 98, 16, 16, "", false, false, guirun.second.window)
	guirun.second.button[1] = guiCreateButton(10, 349, 125, 20, "SAVE", false, guirun.second.window)
	guirun.second.button[2] = guiCreateButton(140, 349, 125, 20, "BACK", false, guirun.second.window)
	guirun.second.button[3] = guiCreateButton(275, 31, 21, 337, ">>\n>>\n>>", false, guirun.second.window)
	guirun.second.button[4] = guiCreateButton(322, 220, 171, 27, "DELETE", false, guirun.second.window)
	guirun.second.button[5] = guiCreateButton(322, 259, 171, 27, "RENAME", false, guirun.second.window)
	guirun.second.button[6] = guiCreateButton(322, 298, 171, 27, "LOAD", false, guirun.second.window)

-- Hide some shit
	guirun.second.edit[1]:setVisible(false)
	guirun.second.label[1]:setVisible(false)
	guirun.second.label[2]:setVisible(false)
	guirun.second.checkbox[1]:setVisible(false)
	guirun.second.button[4]:setVisible(false)
	guirun.second.button[5]:setVisible(false)
	guirun.second.button[6]:setVisible(false)

-- WINDOW SETTINGS
	guiWindowSetMovable(guirun.second.window, true)
	guiWindowSetSizable(guirun.second.window, false)
	guiSetAlpha(guirun.second.window, 0.87)
	guiSetProperty(guirun.second.window, "AlwaysOnTop", "True")
	guiSetVisible(guirun.second.window, false)
	guiSetSize(guirun.second.window, 0.22, 0.51, true)	-- 0.38, 0.51 

-- LABEL SETTINGS

	guiLabelSetVerticalAlign(guirun.second.label[1], "center")
	guiLabelSetHorizontalAlign(guirun.second.label[1], "center", false)
	guiLabelSetHorizontalAlign(guirun.second.label[2], "left", true)

-- GRIDLIST SETTINGS
	local column = guiGridListAddColumn(guirun.second.gridlist[1], "NAME", 0.9)

-- BUTTON SETTINGS
	guiSetProperty(guirun.second.button[1], "NormalTextColour", "FFAAAAAA")
	guiSetProperty(guirun.second.button[2], "NormalTextColour", "FFAAAAAA")
	guiSetProperty(guirun.second.button[3], "NormalTextColour", "FFAAAAAA")
	guiSetProperty(guirun.second.button[4], "NormalTextColour", "FFAAAAAA")
	guiSetProperty(guirun.second.button[5], "NormalTextColour", "FFAAAAAA")
	guiSetProperty(guirun.second.button[6], "NormalTextColour", "FFAAAAAA")


--   /$$$$$$  /$$   /$$ /$$$$$$       /$$$$$$$$ /$$   /$$ /$$   /$$  /$$$$$$  /$$$$$$$$ /$$$$$$  /$$$$$$  /$$   /$$  /$$$$$$ 
--  /$$__  $$| $$  | $$|_  $$_/      | $$_____/| $$  | $$| $$$ | $$ /$$__  $$|__  $$__/|_  $$_/ /$$__  $$| $$$ | $$ /$$__  $$
-- | $$  \__/| $$  | $$  | $$        | $$      | $$  | $$| $$$$| $$| $$  \__/   | $$     | $$  | $$  \ $$| $$$$| $$| $$  \__/
-- | $$ /$$$$| $$  | $$  | $$        | $$$$$   | $$  | $$| $$ $$ $$| $$         | $$     | $$  | $$  | $$| $$ $$ $$|  $$$$$$ 
-- | $$|_  $$| $$  | $$  | $$        | $$__/   | $$  | $$| $$  $$$$| $$         | $$     | $$  | $$  | $$| $$  $$$$ \____  $$
-- | $$  \ $$| $$  | $$  | $$        | $$      | $$  | $$| $$\  $$$| $$    $$   | $$     | $$  | $$  | $$| $$\  $$$ /$$  \ $$
-- |  $$$$$$/|  $$$$$$/ /$$$$$$      | $$      |  $$$$$$/| $$ \  $$|  $$$$$$/   | $$    /$$$$$$|  $$$$$$/| $$ \  $$|  $$$$$$/
--  \______/  \______/ |______/      |__/       \______/ |__/  \__/ \______/    |__/   |______/ \______/ |__/  \__/ \______/ 
--
--------------------------------------------------
-- These functions dictate how the panel behaves
-- when certain actions (events) are triggered.
--------------------------------------------------                                                                                                                          
                                                                                                                          
                                                                                                                          


--------------------------------------------------
-- Sets the main window visible
-- @param boolean this is passed onto setVisible method.

-- @return true if successful, false otherwise
--------------------------------------------------
function guirun:setVisible(bool)
	assert(type(bool) == "boolean", "Incorrect type expected boolean -> guirun.setVisible(bool)")
	local window = self.window
	local cursor = isCursorShowing()
	bool = bool or true

	if window:getVisible() ~= bool then
		window:setVisible(bool)
		if cursor ~= bool then
			showCursor(bool)
		end
		outputDebugString("Set window "..tostring(bool))

		return true
	end

	outputDebugString("Cannot set window "..tostring(bool))
	return false
end

--------------------------------------------------
-- Opens both second.window and third.window
-- which is also known as 'save mode'
--------------------------------------------------
function guirun:setSaveMode(bool)
	assert(type(bool) == "boolean", "Incorrect type expected boolean -> guirun:setSaveMode(bool)")
	local window = self.second.window
	local funcButton = self.second.button[1]
	local other = self.third.window
		window:setVisible(bool)
		other:setVisible(bool)
			-- Set text to elements
		if bool then
			funcButton:setText("SAVE")
			window:setText("SAVE")
		end
	return true
end
--------------------------------------------------
-- Opens both second.window and sets text to some
-- gui elements which is also known as 'load'
--------------------------------------------------
function guirun:setLoadMode(bool)
	assert(type(bool) == "boolean", "Incorrect type expected boolean -> guirun:setLoadMode(bool)")
	local window = self.second.window
	--local other = self.third.window
	local funcButton = self.second.button[1]

		window:setVisible(bool)

		-- Set text to elements
		if bool then 
			window:setText("LOAD")
			funcButton:setText("LOAD")
		end
		return true
end

function guirun:otherElements(bool)
	guiSetVisible(guirun.second.edit[1]    ,bool)
	guiSetVisible(guirun.second.label[1]   ,bool)
	guiSetVisible(guirun.second.label[2]   ,bool)
	guiSetVisible(guirun.second.checkbox[1],bool)
	guiSetVisible(guirun.second.button[4]  ,bool)
	guiSetVisible(guirun.second.button[5]  ,bool)
	guiSetVisible(guirun.second.button[6]  ,bool)
end

function guirun:expandWindow(bool)
	assert(type(bool) == "boolean", "Incorrect type expected bool")
	local i = settings.secondWindow
	local _, h = guiGetSize(self.second.window, true)

	if bool then
		guiSetSize(self.second.window, i[2], h, true)
		self:otherElements(bool)
		guiSetText(self.second.button[3], guiGetText(self.second.button[3]):gsub(">", "<"))
		settings._EXPANDED = true
	else
		guiSetSize(self.second.window, i[1], h, true)
		self:otherElements(bool)
		guiSetText(self.second.button[3], guiGetText(self.second.button[3]):gsub("<", ">"))
		settings._EXPANDED = false
	end
end


--------------------------------------------------
-- Populates the gridlist with contents of XML file.
-- FIXED
--------------------------------------------------
function guirun:populateGridlist()
	if code ~= nil or #code > 0 then
		local gridlist = self.second.gridlist[1]
		gridlist:clear()	-- clear first
		for k, v in pairs(code) do
			local r = guiGridListAddRow(gridlist)
			guiGridListSetItemText(gridlist, r, column, k, false, false)
		end
		outputDebugString("Set values to gridlist")
		return true
	end

	outputDebugString("Cannot populate gridlist")
	return false
end

--------------------------------------------------
-- Get which radio button is selected
--------------------------------------------------
function guirun:getRunMode()
	for i = 1, 2 do
		if self.radiobutton[i]:getSelected() then
			return settings.runMode[i]
		end
	end
	-- Unable to get past this point.
end

--------------------------------------------------
-- Get code from key
--------------------------------------------------
function getCodeFromKey(key)
	assert(type(key) == "string" or type(code) == "string", "Incorrect type expected string value.")

	if code then

		if key then
			local piece = code[key]
			if piece ~= nil then
				return piece
			end
			-- TODO: Instead of assert errors pass them onto another panel...
			error("Could not find code with key given.")
		end
	end
	assert(code, "Code has not been loaded!")
	return false
end

--------------------------------------------------
-- Retrieve the item you've selected
--------------------------------------------------
function guirun:getSelectedItemText()
	local grid = self.second.gridlist[1]
	local r, c = guiGridListGetSelectedItem(grid)

	if not (r == -1 or c == -1) then
		local text = guiGridListGetItemText(grid, r, c)
		--if not text then return false end
		return text
	end
end

--------------------------------------------------
-- set the memo's text
--------------------------------------------------
function guirun:setMemoText(text)
	assert(type(text) == "string", "Incorrect type expected string value")

	return self.memo[1]:setText(text)
end

--------------------------------------------------
-- THESE FUNCTIONS WILL ONLY WORK WHEN ATTACHED
-- TO onClientMouseEnter/onClientMouseLeave
--------------------------------------------------
function onLabelEnter()
	if isElement(this) then
		local i = settings.hoverColor
		this:setColor(i[1], i[2], i[3])
	end
end

function onLabelLeave()
	if isElement(this) then
		local i = settings.leaveColor
		this:setColor(i[1], i[2], i[3])
	end
end

